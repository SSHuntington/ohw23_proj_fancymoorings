{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c4a25ee1-faa4-4a90-9602-a94bf526f2e7",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Streamlit Data Visualizations of Mooring Data\n",
    "\n",
    "Purpose: Test simple data visualizations using Streamlit for python and create a shareable web app.\n",
    "\n",
    "To run this app locally in the browser, install Streamlit. A virtual environment is recommend.\n",
    "> *pip install streamlit*\n",
    "\n",
    "Run the following command in the terminal. Replace the name of the file with the name of your app.\n",
    "> *streamlit run streamlit_mooring_app.py*\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb4fa45b-14ad-4687-93d1-5a3a1745d375",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Import modules"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f769a210-7f4a-4abd-b97f-b5a1a2696816",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Defaulting to user installation because normal site-packages is not writeable\n",
      "Requirement already satisfied: plotly in /home/jovyan/.local/lib/python3.9/site-packages (5.15.0)\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.9/site-packages (from plotly) (23.1)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in /home/jovyan/.local/lib/python3.9/site-packages (from plotly) (8.2.2)\n"
     ]
    }
   ],
   "source": [
    "!pip install plotly\n",
    "import streamlit as st\n",
    "import matplotlib.pyplot as plt\n",
    "from erddapy import ERDDAP\n",
    "import plotly.express as px\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff2acb6f-d1c3-4705-a370-b3556e7163b8",
   "metadata": {},
   "source": [
    "### Access mooring data from ERDDAP server"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "90e80d4c-093a-438a-8cd1-6d9f8dc1f678",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_erddap_data(erddap_url, dataset, data_protocol=\"griddap\", variables=None, constraints=None):\n",
    "    \"\"\"\n",
    "    Function: get_erddap_data\n",
    "    This function uses the erddapy python library to access data from ERDDAP servers,\n",
    "    and to return it to users in convenient formats for python users.\n",
    "    Data can be pulled from \"tabledap\" or \"griddap\" formats, with different\n",
    "    output types, depending on the dap type.\n",
    "\n",
    "    Inputs:\n",
    "    erddap_url    - The url address of the erddap server to pull data from\n",
    "    variables     - The selected variables within the dataset.\n",
    "    data_protocol - The erddap data protocol for the chosen dataset.\n",
    "                    Options include \"tabledap\" or \"griddap\"\n",
    "                    The default option is given as \"griddap\"\n",
    "    dataset       - The ID for the relevant dataset on the erddap server\n",
    "                    If no variables are given, it is assumed that all variables\n",
    "                    will be pulled.\n",
    "    constraints   - These are set by the user to help restrict the data pull\n",
    "                    to only the area and timeframe of interest.\n",
    "                    If no constraints are given, all data in a dataset is pulled.\n",
    "                    Constraints should be given as a dictionary, where\n",
    "                    each entry is a bound and/or selection of a specific axis variable\n",
    "                    Exs. {\"longitude<=\": \"min(longitude)+10\", \"longitude>=\": \"0\"}\n",
    "                         {\"longitude=\": \"140\", \"time>=\": \"max(time)-30\"}\n",
    "\n",
    "    Outputs:\n",
    "    erddap_data   - This variable contains the pulled data from the erddap server.\n",
    "                    If the data_protocol is \"griddap\",  then erddap_data is an xarray dataset\n",
    "                    If the data_protocol is \"tabledap\", then erddap_data is a pandas dataframe\n",
    "    \"\"\"\n",
    "\n",
    "\n",
    "\n",
    "    ############################################\n",
    "    # Set-up the connection to the ERDDAP server\n",
    "    ############################################\n",
    "\n",
    "    # Connect to the erddap server\n",
    "    e = ERDDAP(server=erddap_url, protocol=data_protocol, response='csv')\n",
    "\n",
    "    # Identify the dataset of interest\n",
    "    e.dataset_id = dataset\n",
    "\n",
    "    #########################################\n",
    "    # Pull the data, based upon protocol type\n",
    "    #########################################\n",
    "\n",
    "    # GRIDDAP Protocol\n",
    "    if data_protocol == \"griddap\":\n",
    "\n",
    "        # Initialize the connection\n",
    "        e.griddap_initialize()\n",
    "\n",
    "        # Update the constraints\n",
    "        if constraints is not None:\n",
    "            e.constraints.update(constraints)\n",
    "            e.griddap_initialize()\n",
    "\n",
    "        # Update the selection of the variables\n",
    "        if variables is not None:\n",
    "            e.variables = variables\n",
    "\n",
    "        erddap_data = e.to_xarray()\n",
    "\n",
    "    # TABLEDAP Protocol\n",
    "    elif data_protocol == \"tabledap\":\n",
    "\n",
    "        # Update the constraints\n",
    "        if constraints is not None:\n",
    "            e.constraints = constraints\n",
    "\n",
    "        # Update the selection of the variables\n",
    "        if variables is not None:\n",
    "            e.variables = variables\n",
    "\n",
    "        erddap_data = e.to_pandas()\n",
    "\n",
    "    # Invalid protocol given\n",
    "    else:\n",
    "        print('Invalid ERDDAP protocol. Given protocol is: ' + data_protocol)\n",
    "        print('Valid protocols include \"griddap\" or \"tabledap\". Please restart and try again with a valid protocol')\n",
    "        erddap_data = None\n",
    "\n",
    "    #############################\n",
    "    return erddap_data\n",
    "\n",
    "\n",
    "# Get data\n",
    "cioos_url = 'https://data.cioospacific.ca/erddap'\n",
    "cioos_dataset = 'IOS_CTD_Moorings'\n",
    "\n",
    "variables = [\"time\",\n",
    "             \"sea_water_pressure\",\n",
    "             \"sea_water_temperature\",\n",
    "             \"sea_water_practical_salinity\",\n",
    "             \"TEMPST01\",\n",
    "             \"depth\",\n",
    "             \"longitude\",\n",
    "             \"latitude\",\n",
    "             \"filename\"]\n",
    "\n",
    "constraints = {\"time>=\":datetime(2022,7,1).strftime('%Y-%m-%dT%H:%M:%SZ'),\n",
    "               \"longitude>=\": -128.975,\n",
    "               \"longitude<=\": -121.975,\n",
    "               \"latitude>=\": 49.1,\n",
    "               \"latitude<=\": 49.3}\n",
    "\n",
    "data = get_erddap_data(cioos_url, cioos_dataset,\n",
    "                variables=variables,\n",
    "                constraints=constraints,\n",
    "                data_protocol=\"tabledap\")\n",
    "\n",
    "\n",
    "# print(data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5411cb57-e1a0-4853-911b-e145cb82fe20",
   "metadata": {},
   "source": [
    "### Make some plots \n",
    "First we'll start with a simple interactive plot with a selection box to select a variable to plot against time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "727ea7dc-7180-4bc7-be65-b039c17ffeb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-08-11 16:21:07.206 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run /opt/conda/lib/python3.9/site-packages/ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st.title('IOS_CTD_Moorings Data Visualization')\n",
    "\n",
    "# Interactive Plot\n",
    "# Streamlit allows you to add formatted text to your app\n",
    "st.subheader('Interactive Scatter Plot')\n",
    "st.write('Location:  (49.1 - 49.3 & 126 - 126.7)')\n",
    "st.write('Time frame:  2022-07-01 to 2022-07-21')\n",
    "\n",
    "# # Streamlit widgets for interactive filtering\n",
    "selected_variable = st.selectbox('Select Variable', ('sea_water_temperature (degC)', 'sea_water_pressure (dbar)',\n",
    "                                                     'sea_water_practical_salinity (PSS-78)'))\n",
    "# Plotly express is part of the Plotly library. It contains built in interactive\n",
    "# features like zoom, pan, and hovering data labels \n",
    "plot = px.scatter(data, x=data['time (UTC)'], y=selected_variable)\n",
    "st.plotly_chart(plot)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "253d168d-8428-4164-8b75-59a7d8dec107",
   "metadata": {},
   "source": [
    "Now we'll make a static scatter plot with a table of data values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fe347329-0776-4e7f-b968-15c3610d768d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Get a smaller dataset\n",
    "constraints = {\"time>=\": \"max(time)-365\"}\n",
    "data = get_erddap_data(cioos_url, cioos_dataset,\n",
    "                variables=variables,\n",
    "                constraints=constraints,\n",
    "                data_protocol=\"tabledap\")\n",
    "\n",
    "st.subheader('Static Scatter Plot')\n",
    "st.write('Time frame:  2022-07-21')\n",
    "fig, ax = plt.subplots()\n",
    "cb = ax.scatter(data['time (UTC)'], data['sea_water_temperature (degC)'], c=data['sea_water_pressure (dbar)'], cmap='viridis')\n",
    "ax.set_xlabel('time (UTC)')\n",
    "ax.set_ylabel('sea_water_temperature (degC)')\n",
    "fig.colorbar(cb, ax=ax)\n",
    "# Here we'll use streamlit to display a matplotlib.pyplot figure\n",
    "st.pyplot(fig)\n",
    "\n",
    "# Display a data table to accompany the plot\n",
    "df_subset=data.loc[0:,['time (UTC)','sea_water_temperature (degC)', 'sea_water_pressure (dbar)']]\n",
    "st.dataframe(df_subset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4556b5a1-5e5c-4e7f-84e3-cc907c63e0d0",
   "metadata": {},
   "source": [
    "## App complete!\n",
    "Up to this point, we completed pulling data from an online server and plotting it two different ways using the streamlit library.\n",
    "Now we need to preview and deploy the app"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62e3c988-4674-4185-bb37-e2ab9df53a0f",
   "metadata": {},
   "source": [
    "## Run the app\n",
    "To run the app, make sure your file is saved as a .py python file rather than a jupyter notebook file. Then open up a terminal window and run the following command, replacing my_app.py with the path to your app file.\n",
    "> *streamlit run my_app.py*\n",
    "\n",
    "A browser window should open displaying the plots you created\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "754665a5-7c48-4d70-a1bd-8a75b8bef9de",
   "metadata": {},
   "source": [
    "## Share your app\n",
    "\n",
    "To share your app, you have two options. You may set up a private server to host your application or you can deploy it on Streamlit's free community cloud. Once deployed, you will have a url that can be publically shared. Step by step instructions can be found on the [Streamlit website](https://blog.streamlit.io/host-your-streamlit-app-for-free/#:~:text=Connect%20your%20account%20to%20GitHub,-There%20are%20two&text=On%20the%20authorization%20page%2C%20click%20on%20%E2%80%9CAuthorize%20streamlit.%22&text=This%20will%20let%20Community%20Cloud,%2C%20click%20%E2%80%9CAuthorize%20streamlit.%22&text=Now%20you're%20ready%20to%20deploy%20Streamlit%20apps!)\n",
    "\n",
    "Deployed web app for this notebook example can be viewed [here](https://mooringapp-5davsitseswj6tfudqtvqh.streamlit.app/)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "beea2917-f198-4965-9c7c-642ae1c7da0f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
